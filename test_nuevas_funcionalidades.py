# Script de Prueba - Sistema de B√∫squeda y CRUD de Puestos
# Para ejecutar: python test_nuevas_funcionalidades.py

import requests
import json

BASE_URL = "http://localhost:5000"

print("="*60)
print("üß™ PRUEBAS DE NUEVAS FUNCIONALIDADES")
print("="*60)
print()

# 1. Probar b√∫squeda sin filtros
print("1Ô∏è‚É£  Probando b√∫squeda sin filtros...")
try:
    response = requests.get(f"{BASE_URL}/api/buscar")
    if response.status_code == 200:
        data = response.json()
        print(f"   ‚úÖ √âxito: {data.get('total_resultados', 0)} resultados encontrados")
    else:
        print(f"   ‚ùå Error: Status {response.status_code}")
except Exception as e:
    print(f"   ‚ùå Error de conexi√≥n: {e}")
print()

# 2. Probar b√∫squeda con filtros
print("2Ô∏è‚É£  Probando b√∫squeda con filtros...")
try:
    params = {
        'q': 'programaci√≥n',
        'region': 'Regi√≥n Metropolitana',
        'modalidad': 'Remoto'
    }
    response = requests.get(f"{BASE_URL}/api/buscar", params=params)
    if response.status_code == 200:
        data = response.json()
        print(f"   ‚úÖ √âxito: {data.get('total_resultados', 0)} resultados con filtros")
        print(f"   üìã Filtros aplicados: {data.get('filtros_aplicados', {})}")
    else:
        print(f"   ‚ùå Error: Status {response.status_code}")
except Exception as e:
    print(f"   ‚ùå Error de conexi√≥n: {e}")
print()

# 3. Probar endpoint de empresas (debe existir)
print("3Ô∏è‚É£  Probando endpoint de empresas...")
try:
    response = requests.get(f"{BASE_URL}/api/empresas")
    if response.status_code == 200:
        data = response.json()
        print(f"   ‚úÖ √âxito: {len(data)} empresas en el sistema")
    else:
        print(f"   ‚ùå Error: Status {response.status_code}")
except Exception as e:
    print(f"   ‚ùå Error de conexi√≥n: {e}")
print()

# 4. Probar endpoint de puestos
print("4Ô∏è‚É£  Probando endpoint de puestos...")
try:
    response = requests.get(f"{BASE_URL}/api/puestos")
    if response.status_code == 200:
        data = response.json()
        print(f"   ‚úÖ √âxito: {len(data)} puestos disponibles")
    else:
        print(f"   ‚ùå Error: Status {response.status_code}")
except Exception as e:
    print(f"   ‚ùå Error de conexi√≥n: {e}")
print()

# 5. Verificar que las p√°ginas existan
print("5Ô∏è‚É£  Verificando p√°ginas web...")
paginas = [
    ('/', 'P√°gina principal'),
    ('/resultados-busqueda', 'Resultados de b√∫squeda'),
    ('/login_empresa', 'Login empresa')
]

for ruta, nombre in paginas:
    try:
        response = requests.get(f"{BASE_URL}{ruta}")
        if response.status_code == 200:
            print(f"   ‚úÖ {nombre}: OK")
        else:
            print(f"   ‚ö†Ô∏è  {nombre}: Status {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå {nombre}: Error {e}")
print()

print("="*60)
print("üìä RESUMEN")
print("="*60)
print("""
‚úÖ Si todos los tests pasaron:
   - El backend est√° funcionando correctamente
   - Los nuevos endpoints est√°n disponibles
   - Las p√°ginas web son accesibles

üîê Para probar el dashboard de empresa:
   1. Ir a http://localhost:5000/login_empresa
   2. Iniciar sesi√≥n con una empresa registrada
   3. Ser√°s redirigido al dashboard autom√°ticamente

üîç Para probar la b√∫squeda:
   1. Ir a http://localhost:5000
   2. Usar el formulario de b√∫squeda
   3. Ver resultados en la nueva p√°gina

üì± Para la app m√≥vil:
   - Los endpoints ya est√°n integrados en api.ts
   - Usar los nuevos m√©todos del apiService
""")

print("="*60)
